using AvaloniaPropertySourceGenerator.Builders;
using AvaloniaPropertySourceGenerator.Extensions;
using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using static Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;

namespace AvaloniaPropertySourceGenerator.Models;
internal sealed partial record SyntaxHierarchy(string FilenameHint, string MetadataName, string Namespace, ImmutableArray<SyntaxType> SyntaxTypes)
{
    public static SyntaxHierarchy From(INamedTypeSymbol namedTypeSymbol)
    {
        using var types = ImmutableArrayBuilder<SyntaxType>.Rent();

        for (INamedTypeSymbol? parent = namedTypeSymbol; parent is not null; parent = parent.ContainingType)
            types.Add(new SyntaxType(parent.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat), parent.TypeKind, parent.IsRecord));

        return new(namedTypeSymbol.GetFullyQualifiedMetadataName(), namedTypeSymbol.MetadataName, namedTypeSymbol.ContainingNamespace.ToDisplayString(new(typeQualificationStyle: NameAndContainingTypesAndNamespaces)), types.ToImmutable());
    }


    public CompilationUnitSyntax CompilationUnitSyntax(ImmutableArray<MemberDeclarationSyntax> memberDeclarations, BaseListSyntax? baseList = null)
    {
        TypeDeclarationSyntax typeDeclarationSyntax = SyntaxTypes[0].ToSyntax()
                                                                    .AddModifiers(Token(TriviaList(Comment("/// <inheritdoc/>")), SyntaxKind.PartialKeyword, TriviaList()))
                                                                    .AddMembers(memberDeclarations.ToArray());

        if (baseList is not null)
            typeDeclarationSyntax = typeDeclarationSyntax.WithBaseList(baseList);

        foreach (SyntaxType parentType in SyntaxTypes.AsSpan().Slice(1))
        {
            typeDeclarationSyntax =  parentType.ToSyntax()
                                               .AddModifiers(Token(TriviaList(Comment("/// <inheritdoc/>")), SyntaxKind.PartialKeyword, TriviaList()))
                                               .AddMembers(typeDeclarationSyntax);
        }

        SyntaxTriviaList syntaxTriviaList = TriviaList(Comment("// <auto-generated/>"),
                                                       Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                                                       Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));

        if (Namespace is "")
        {
            syntaxTriviaList = syntaxTriviaList.Add(Comment("/// <inheritdoc/>"));
            return CompilationUnit()
                   .AddMembers(typeDeclarationSyntax.WithLeadingTrivia(syntaxTriviaList))
                   .NormalizeWhitespace();
        }

        return CompilationUnit()
               .AddMembers(NamespaceDeclaration(IdentifierName(Namespace))
                                                .WithLeadingTrivia(syntaxTriviaList)
                                                .AddMembers(typeDeclarationSyntax))
               .NormalizeWhitespace();
    }

}


